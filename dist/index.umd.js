!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@livekit/react-native"),require("eventemitter3"),require("livekit-client")):"function"==typeof define&&define.amd?define(["exports","@livekit/react-native","eventemitter3","livekit-client"],t):t((e||self).retellClientRnSdk={},e.reactNative,e.eventemitter3,e.livekitClient)}(this,function(e,t,n,o){function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}var a=function(e){return"undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame(e):setTimeout(e,16)},r=new TextDecoder;try{t.registerGlobals()}catch(e){console.warn("Failed to register LiveKit globals:",e)}var c=/*#__PURE__*/function(e){function t(){var t;return(t=e.call(this)||this).room=void 0,t.connected=!1,t.isAgentTalking=!1,t.analyzerComponent=void 0,t.captureAudioFrame=void 0,t}var n,c;c=e,(n=t).prototype=Object.create(c.prototype),n.prototype.constructor=n,i(n,c);var l=t.prototype;return l.startCall=function(e){try{var t=this,n=function(n,i){try{var a=(t.room=new o.Room({audioCaptureDefaults:{autoGainControl:!0,echoCancellation:!0,noiseSuppression:!0,channelCount:1,deviceId:e.captureDeviceId,sampleRate:e.sampleRate},audioOutput:{deviceId:e.playbackDeviceId}}),t.handleRoomEvents(),t.handleAudioEvents(e),t.handleDataEvents(),Promise.resolve(t.room.connect("wss://retell-ai-4ihahnq7.livekit.cloud",e.accessToken)).then(function(){console.log("connected to room",t.room.name),t.room.localParticipant.setMicrophoneEnabled(!0),t.connected=!0,t.emit("call_started")}))}catch(e){return i(e)}return a&&a.then?a.then(void 0,i):a}(0,function(e){t.emit("error","Error starting call"),console.error("Error starting call",e),t.stopCall()});return Promise.resolve(n&&n.then?n.then(function(){}):void 0)}catch(e){return Promise.reject(e)}},l.startAudioPlayback=function(){try{return Promise.resolve(this.room.startAudio()).then(function(){})}catch(e){return Promise.reject(e)}},l.stopCall=function(){var e,t;this.connected&&(this.connected=!1,this.emit("call_ended"),null==(e=this.room)||e.disconnect(),this.isAgentTalking=!1,delete this.room,this.analyzerComponent&&(this.analyzerComponent.cleanup(),delete this.analyzerComponent),this.captureAudioFrame&&(t=this.captureAudioFrame,"undefined"!=typeof window&&window.cancelAnimationFrame?window.cancelAnimationFrame(t):clearTimeout(t),delete this.captureAudioFrame))},l.mute=function(){this.connected&&this.room.localParticipant.setMicrophoneEnabled(!1)},l.unmute=function(){this.connected&&this.room.localParticipant.setMicrophoneEnabled(!0)},l.captureAudioSamples=function(){var e=this;if(this.connected&&this.analyzerComponent){var t=new Float32Array(this.analyzerComponent.analyser.fftSize);this.analyzerComponent.analyser.getFloatTimeDomainData(t),this.emit("audio",t),this.captureAudioFrame=a(function(){return e.captureAudioSamples()})}},l.handleRoomEvents=function(){var e=this;this.room.on(o.RoomEvent.ParticipantDisconnected,function(t){"server"===(null==t?void 0:t.identity)&&setTimeout(function(){e.stopCall()},500)}),this.room.on(o.RoomEvent.Disconnected,function(){e.stopCall()})},l.handleAudioEvents=function(e){var t=this;this.room.on(o.RoomEvent.TrackSubscribed,function(n,i,r){if(n.kind===o.Track.Kind.Audio&&n instanceof o.RemoteAudioTrack){if("agent_audio"===i.trackName&&(t.emit("call_ready"),e.emitRawAudioSamples))try{t.analyzerComponent=o.createAudioAnalyser(n),t.captureAudioFrame=a(function(){return t.captureAudioSamples()})}catch(e){console.warn("Audio analysis not supported in React Native:",e)}n.attach()}})},l.handleDataEvents=function(){var e=this;this.room.on(o.RoomEvent.DataReceived,function(t,n,o,i){try{if("server"!==(null==n?void 0:n.identity))return;var a=r.decode(t),c=JSON.parse(a);"update"===c.event_type?e.emit("update",c):"metadata"===c.event_type?e.emit("metadata",c):"agent_start_talking"===c.event_type?(e.isAgentTalking=!0,e.emit("agent_start_talking")):"agent_stop_talking"===c.event_type?(e.isAgentTalking=!1,e.emit("agent_stop_talking")):"node_transition"===c.event_type&&e.emit("node_transition",c)}catch(e){console.error("Error decoding data received",e)}})},t}(n.EventEmitter);e.RetellWebClient=c,e.default=c});
